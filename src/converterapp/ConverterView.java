/*
 * ConverterView.java
 */

package converterapp;

import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;

/**
 * The application's main frame.
 */
public class ConverterView extends FrameView {

    
        //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        //initialize my code?
         public Converter convert = new Converter();
         public converterLogic converter = new converterLogic();

        //end my editing

    public ConverterView(SingleFrameApplication app) {
        super(app);

        initComponents();

        //making the convert button, the default button
        //ie: enter button clicks it
        getRootPane().setDefaultButton(converterButton);
        //end

            unitsTypeList.removeAllItems();
            for (int count = 0; count < convert.UnitTypes.length ; count++ )
                unitsTypeList.addItem( convert.UnitTypes[count] );




            
        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = ConverterApp.getApplication().getMainFrame();
            aboutBox = new ConverterAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        ConverterApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        appInput = new javax.swing.JTextField();
        appOutput = new javax.swing.JTextField();
        converterButton = new javax.swing.JButton();
        copyButton = new javax.swing.JButton();
        prefixInputList = new javax.swing.JComboBox();
        prefixOutputList = new javax.swing.JComboBox();
        unitsTypeList = new javax.swing.JComboBox();
        exponentLabel = new javax.swing.JLabel();
        unitLabel = new javax.swing.JLabel();
        unitTypeLabel = new javax.swing.JLabel();
        conversionList = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        invertButton = new javax.swing.JButton();
        unitOfInput = new javax.swing.JLabel();
        unitOfOutput = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(converterapp.ConverterApp.class).getContext().getResourceMap(ConverterView.class);
        appInput.setText(resourceMap.getString("appInput.text")); // NOI18N
        appInput.setName("appInput"); // NOI18N

        appOutput.setEditable(false);
        appOutput.setText(resourceMap.getString("appOutput.text")); // NOI18N
        appOutput.setName("appOutput"); // NOI18N

        converterButton.setText(resourceMap.getString("converterButton.text")); // NOI18N
        converterButton.setName("converterButton"); // NOI18N
        converterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                converterButtonActionPerformed(evt);
            }
        });

        copyButton.setText(resourceMap.getString("copyButton.text")); // NOI18N
        copyButton.setName("copyButton"); // NOI18N
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });

        prefixInputList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "yotta (10^24)", "zetta (10^21)", "exa (10^18)", "peta (10^15)", "tera (10^12)", "giga (10^9)", "mega (10^6)", "kilo (10^3)", "hecto (10^2)", "deca (10^1)", "(none) (10^0)", "deci (10^-1)", "centi (10^-2)", "milli (10^-3)", "micro (10^-6)", "nano (10^-9)", "pico (10^-12)", "femto (10^-15)", "atto (10^-18)", "zepto (10^-21)", "yocto (10^-24)" }));
        prefixInputList.setSelectedIndex(10);
        prefixInputList.setName("prefixInputList"); // NOI18N

        prefixOutputList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "yotta (10^24)", "zetta (10^21)", "exa (10^18)", "peta (10^15)", "tera (10^12)", "giga (10^9)", "mega (10^6)", "kilo (10^3)", "hecto (10^2)", "deca (10^1)", "(none) (10^0)", "deci (10^-1)", "centi (10^-2)", "milli (10^-3)", "micro (10^-6)", "nano (10^-9)", "pico (10^-12)", "femto (10^-15)", "atto (10^-18)", "zepto (10^-21)", "yocto (10^-24)" }));
        prefixOutputList.setSelectedIndex(10);
        prefixOutputList.setName("prefixOutputList"); // NOI18N
        prefixOutputList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prefixOutputListActionPerformed(evt);
            }
        });

        unitsTypeList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Energy", "Power", "Mass", "Distance", "Frequency" }));
        unitsTypeList.setName("unitsTypeList"); // NOI18N
        unitsTypeList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unitsTypeListActionPerformed(evt);
            }
        });

        exponentLabel.setText(resourceMap.getString("exponentLabel.text")); // NOI18N
        exponentLabel.setName("exponentLabel"); // NOI18N

        unitLabel.setText(resourceMap.getString("unitLabel.text")); // NOI18N
        unitLabel.setName("unitLabel"); // NOI18N

        unitTypeLabel.setText(resourceMap.getString("unitTypeLabel.text")); // NOI18N
        unitTypeLabel.setName("unitTypeLabel"); // NOI18N

        conversionList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Watt to Newton" }));
        conversionList.setName("conversionList"); // NOI18N
        conversionList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conversionListActionPerformed(evt);
            }
        });

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        invertButton.setText(resourceMap.getString("invertButton.text")); // NOI18N
        invertButton.setName("invertButton"); // NOI18N
        invertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invertButtonActionPerformed(evt);
            }
        });

        unitOfInput.setText(resourceMap.getString("unitOfInput.text")); // NOI18N
        unitOfInput.setName("unitOfInput"); // NOI18N

        unitOfOutput.setText(resourceMap.getString("unitOfOutput.text")); // NOI18N
        unitOfOutput.setName("unitOfOutput"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(converterButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(copyButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(invertButton))
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(unitTypeLabel)
                            .add(jLabel1)
                            .add(jLabel2))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(mainPanelLayout.createSequentialGroup()
                                .add(unitsTypeList, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(18, 18, 18)
                                .add(jLabel3)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(conversionList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(mainPanelLayout.createSequentialGroup()
                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(appOutput, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                                    .add(appInput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 247, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(prefixOutputList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 137, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(prefixInputList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(exponentLabel))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(unitOfOutput)
                                    .add(unitOfInput)
                                    .add(unitLabel)))))
                    .add(jLabel4))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainPanelLayout.linkSize(new java.awt.Component[] {appInput, appOutput}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        mainPanelLayout.linkSize(new java.awt.Component[] {prefixInputList, prefixOutputList, unitOfInput, unitOfOutput}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(unitsTypeList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3)
                    .add(conversionList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(unitTypeLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(exponentLabel)
                    .add(unitLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(prefixInputList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(appInput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1)
                    .add(unitOfInput))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(appOutput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(prefixOutputList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jLabel2))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(copyButton)
                            .add(invertButton)
                            .add(converterButton)))
                    .add(unitOfOutput))
                .add(18, 18, 18)
                .add(jLabel4)
                .add(26, 26, 26))
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText(resourceMap.getString("jMenuItem2.text")); // NOI18N
        jMenuItem2.setName("jMenuItem2"); // NOI18N
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem2);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(converterapp.ConverterApp.class).getContext().getActionMap(ConverterView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        org.jdesktop.layout.GroupLayout statusPanelLayout = new org.jdesktop.layout.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(statusPanelSeparator, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 685, Short.MAX_VALUE)
            .add(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(statusMessageLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 501, Short.MAX_VALUE)
                .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(statusPanelLayout.createSequentialGroup()
                .add(statusPanelSeparator, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(statusMessageLabel)
                    .add(statusAnimationLabel)
                    .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void converterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_converterButtonActionPerformed
        // TODO add your handling code here:

        double userVal;

        //making sure only numbers are sent to the functions
        try{
           userVal = Double.parseDouble( appInput.getText() ); //get the string and convert to double
        }
        catch (NumberFormatException e) {
            appInput.setText ("You must enter a number.");
            appInput.selectAll();

            userVal = 0;
        }


        // below are the variables for n to input 10^(n)
        double n;
        
        switch ( (int) prefixInputList.getSelectedIndex() ) {
            case 0: n = 24;  break;
            case 1: n = 21; break;
            case 2: n = 18; break;
            case 3: n = 15; break;
            case 4: n = 12; break;
            case 5: n = 9 ; break;
            case 6: n = 6 ; break;
            case 7: n = 3 ; break;
            case 8: n = 2 ; break;
            case 9: n = 1 ; break;
            case 10: n = 0; break;
            case 11: n = -1; break;
            case 12: n = -2; break;
            case 13: n = -3; break;
            case 14: n = -6; break;
            case 15: n = -9; break;
            case 16: n = -12; break;
            case 17: n = -15; break;
            case 18: n = -18; break;
            case 19: n = -21; break;
            case 20: n = -24; break;
            default: n = 0; break;
        }

        //now that we know how much to multiply by: 10^n
        double curVal = convert.div10to(userVal, n);
        //curVal = curVal * 10^n

        /* Template to apply conversion function
         *
         * first check which catagory to be in
         * then check which conversion is wanted
         * then apply the correct function
         *
         * to add a new function:
         * else if ( # ==(int)unitsTypeList.getSelectedIndex() //first check which catagory to be in
         * switch ((int)unitsTypeList.getSelectedIndex() ){ //then check which conversion is wanted
         * case #:
         *        the new function //then apply the correct function
         * }
         *
         * */

        /* result = convert(userVal, catagory, specific_conversion )
         * result = convert( (int)unitsTypeList.getSelectedIndex(),
                    (int)conversionList.getSelectedIndex()
         *                  )
         *
         *
         * */
        result = converter.logic(   userVal,
                                    (int)unitsTypeList.getSelectedIndex(),
                                    (int)conversionList.getSelectedIndex()
                          );


/*
        if ( DISTANCE == (int)unitsTypeList.getSelectedIndex() )
            switch ( (int)conversionList.getSelectedIndex() ) {
                case 0:
                    result = convert.distance.MtoFT(curVal);
                    break;
                case 1:
                    result = convert.distance.FTtoM(curVal);
                    break;
                case 2:
                    result = convert.distance.FTtoINCHES(curVal);
                    break;
                case 3:
                    result = convert.distance.INCHEStoFT(curVal);
                    break;
                case 4:
                    result = convert.distance.FTtoYD(curVal);
                    break;
                case 5:
                    result = convert.distance.YDtoFT(curVal);
                    break;
                case 6:
                    result = convert.distance.FTtoMILES(curVal);
                    break;
                case 7:
                    result = convert.distance.MILEStoFT(curVal); //broken
                    break;
                default:
                    result = 0.0;
                    break;
            }
        else if ( ENERGY == (int) unitsTypeList.getSelectedIndex() )
            switch ( (int)conversionList.getSelectedIndex() ) {
                case 0:
                    result = convert.energy.FTLBtoNM(curVal);
                    break;
                case 1:
                    result = convert.energy.NMtoFTLB( curVal);
                    break;
                default:
                    result = 0.0;
                    break;
            }
        else if ( MASS == (int)unitsTypeList.getSelectedIndex() )
            switch ( (int)conversionList.getSelectedIndex() ) {
                case 0:
                    result = convert.mass.LBStoG( curVal);
                    break;
                case 1:
                    result = convert.mass.GtoLBS( curVal);
                    break;
                case 2:
                    result = convert.mass.LBStoOZ( curVal);
                    break;
                case 3:
                    result = convert.mass.OZtoLBS( curVal);
                    break;
                default:
                    result = 0.0;
                    break;
            }
        else if ( POWER == (int)unitsTypeList.getSelectedIndex() )
            switch ( (int)conversionList.getSelectedIndex() ) {
                case 0:
                    result = convert.power.MechHPtoW( curVal);
                    break;
                case 1:
                    result = convert.power.MechWtoHP( curVal);
                    break;
                default:
                    result = 0.0;
                    break;
            }
        else if (4 == (int)unitsTypeList.getSelectedIndex() )
            switch ( (int)conversionList.getSelectedIndex() ) {
                case 0:
                    result = convert.frequency.HZtoSEC( curVal);
                    break;
                case 1:
                    result = convert.frequency.SECtoHZ( curVal);
                    break;
                case 2:
                    result = convert.frequency.PERtoHZ( curVal);
                    break;
                case 3:
                    result = convert.frequency.HZtoPER( curVal);
                    break;
                case 4:
                    result = convert.frequency.HZtoW( curVal);
                    break;
                case 5:
                    result = convert.frequency.WtoHZ( curVal);
                    break;
                default:
                    result = 0.0;
                    break;
            }
        else
            result = 0.0;
        */

        //now output result to the GUI
         
        appOutput.setText( Double.toString(result) );
        prefixOutputList.setSelectedIndex(10); //ensure that the prefix is 10^0 = 1

}//GEN-LAST:event_converterButtonActionPerformed

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
        // TODO add your handling code here:
        appOutput.selectAll();
        appOutput.copy();
    }//GEN-LAST:event_copyButtonActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        appOutput.selectAll();
        appOutput.copy();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:

        appInput.selectAll();
        appInput.paste();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void unitsTypeListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unitsTypeListActionPerformed
        // TODO add your handling code here:
        /*
         *
         *
        UnitTypes {DISTANCE, MASS, ENERGY, POWER};

        DistanceUnits{ METRES, FEET, INCHES, MILES, YARD, };
         */
       // UnitTypes

        /* Template to load function list into combobox
         *
         *
         *  check catagory
         *
         * to add a new function:
         * * case #:
         *        add new catogory item (its automated, just edit the converterClass)
         * }
         *
         * */

        conversionList.removeAllItems();
        switch ( (int)unitsTypeList.getSelectedIndex() ) {
            case 0:
                for (int count = 0; count < convert.energy.Conversions.length ; count++ )
                     conversionList.addItem( convert.energy.Conversions[count] );
                 break;
            case 1:
                for (int count = 0; count < convert.power.Conversions.length ; count++ )
                     conversionList.addItem( convert.power.Conversions[count] );
                 break;
            case 2:
                for (int count = 0; count < convert.mass.Conversions.length ; count++)
                    conversionList.addItem( convert.mass.Conversions[count] );
                break;
            case 3:
                 for (int count = 0; count < convert.distance.Conversions.length ; count++ )
                     conversionList.addItem( convert.distance.Conversions[count] );
                 break;
            case 4:
                for (int count = 0; count < convert.frequency.Conversions.length ; count++ )
                     conversionList.addItem( convert.frequency.Conversions[count] );
                break;
            default:
                conversionList.addItem("BAD"); //if you miscounted
                break;
        }



    }//GEN-LAST:event_unitsTypeListActionPerformed

    private void conversionListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conversionListActionPerformed
        // TODO add your handling code here:

       /* Template to add units
         *
         * first check which catagory to be in
         * then check which conversion is wanted
         * then apply the correct units
         *
         * to add a new function:
         * else if ( # ==(int)unitsTypeList.getSelectedIndex() //first check which catagory to be in
         * switch ((int)unitsTypeList.getSelectedIndex() ){ //then check which conversion is wanted
         * case #:
         *        the new units //then apply the correct function
         * }
         *
         * */


           if ( DISTANCE == (int)unitsTypeList.getSelectedIndex() )
            switch ( (int)conversionList.getSelectedIndex() ) {
                case 0:
                    //result = convert.distance.MtoFT(curVal);
                    unitOfInput.setText("Metres");
                    unitOfOutput.setText("Feet");
                    break;
                case 1:
                   // result = convert.distance.FTtoM(curVal);
                    unitOfInput.setText("Feet");
                    unitOfOutput.setText("Metres");
                    break;
                case 2:
                    //result = convert.distance.FTtoINCHES(curVal);
                    unitOfInput.setText("Feet");
                    unitOfOutput.setText("Inches");
                    break;
                case 3:
                   // result = convert.distance.INCHEStoFT(curVal);
                    unitOfInput.setText("Inches");
                    unitOfOutput.setText("Feet");
                    break;
                case 4:
                   // result = convert.distance.FTtoYD(curVal);
                    unitOfInput.setText("Feet");
                    unitOfOutput.setText("Yards");
                    break;
                case 5:
                   // result = convert.distance.YDtoFT(curVal);
                    unitOfInput.setText("Yards");
                    unitOfOutput.setText("Feet");
                    break;
                case 6:
                  //  result = convert.distance.FTtoMILES(curVal);
                    unitOfInput.setText("Feet");
                    unitOfOutput.setText("Miles");
                    break;
                case 7:
                    //result = convert.distance.MILEStoFT(curVal); //broken
                    unitOfInput.setText("Miles");
                    unitOfOutput.setText("Feet");
                    break;
                default:
                   // result = 0.0;
                    break;
            }
        else if ( ENERGY == (int) unitsTypeList.getSelectedIndex() )
            switch ( (int)conversionList.getSelectedIndex() ) {
                case 0:
                    //result = convert.energy.FTLBtoNM(curVal);
                    unitOfInput.setText("Foot Pounds");
                    unitOfOutput.setText("Newton Metres");
                    break;
                case 1:
                   // result = convert.energy.NMtoFTLB( curVal);
                    unitOfInput.setText("Newton Metres");
                    unitOfOutput.setText("Foot Pounds");
                    break;
                default:
                   // result = 0.0;
                    break;
            }
        else if ( MASS == (int)unitsTypeList.getSelectedIndex() )
            switch ( (int)conversionList.getSelectedIndex() ) {
                case 0:
                   // result = convert.mass.LBStoG( curVal);
                    unitOfInput.setText("Pounds");
                    unitOfOutput.setText("Grams");
                    break;
                case 1:
                   // result = convert.mass.GtoLBS( curVal);
                    unitOfInput.setText("Grams");
                    unitOfOutput.setText("Pounds");
                    break;
                case 2:
                   // result = convert.mass.LBStoOZ( curVal);
                    unitOfInput.setText("Pounds");
                    unitOfOutput.setText("Ounces");
                    break;
                case 3:
                   // result = convert.mass.OZtoLBS( curVal);
                    unitOfInput.setText("Ounces");
                    unitOfOutput.setText("Pounds");
                    break;
                default:
                   // result = 0.0;
                    break;
            }
        else if ( POWER == (int)unitsTypeList.getSelectedIndex() )
            switch ( (int)conversionList.getSelectedIndex() ) {
                case 0:
                    //result = convert.power.MechHPtoW( curVal);
                    unitOfInput.setText("Horse Power");
                    unitOfOutput.setText("Watts");
                    break;
                case 1:
                   // result = convert.power.MechWtoHP( curVal);
                    unitOfInput.setText("Watts");
                    unitOfOutput.setText("Horse Power");
                    break;
                default:
                   // result = 0.0;
                    break;
            }
            else if (4 == (int)unitsTypeList.getSelectedIndex() )
            switch ( (int)conversionList.getSelectedIndex() ) {
                case 0:
                    //result = convert.frequency.HZtoSEC( curVal);
                    unitOfInput.setText("Cycles Per Seconds (Hz)");
                    unitOfOutput.setText("Seconds");
                    break;
                case 1:
                    //result = convert.frequency.SECtoHZ( curVal);
                    unitOfInput.setText("Seconds");
                    unitOfOutput.setText("Cycles Per Seconds (Hz)");
                    break;
                case 2:
                    //result = convert.frequency.PERtoHZ( curVal);
                    unitOfInput.setText("Seconds");
                    unitOfOutput.setText("Cycles Per Seconds (Hz)");
                    break;
                case 3:
                   // result = convert.frequency.HZtoPER( curVal);
                    unitOfInput.setText("Cycles Per Seconds (Hz)");
                    unitOfOutput.setText("Seconds");
                    break;
                case 4:
                    //result = convert.frequency.HZtoW( curVal);
                    unitOfInput.setText("Cycles Per Seconds (Hz)");
                    unitOfOutput.setText("Radians per Seconds");
                    break;
                case 5:
                    //result = convert.frequency.WtoHZ( curVal);
                    unitOfInput.setText("Radians per Seconds");
                    unitOfOutput.setText("Cycles Per Seconds (Hz)");
                    break;
                default:
                   // result = 0.0;
                    break;
            }
      else
      {
               unitOfInput.setText("");
                    unitOfOutput.setText("");
      }
            
            //result = 0.0;
    }//GEN-LAST:event_conversionListActionPerformed

    private void prefixOutputListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prefixOutputListActionPerformed
        // TODO add your handling code here:
        /*yotta (10^24), zetta (10^21),
        exa (10^18), peta (10^15), tera (10^12), giga (10^9), mega (10^6),
         kilo (10^3), hecto (10^2), deca (10^1), (none) (10^0), deci (10^-1),
         centi (10^-2), milli (10^-3), micro (10^-6), nano (10^-9),
         pico (10^-12), femto (10^-15), atto (10^-18), zepto (10^-21),
         yocto (10^-24)
        */

        // the following just multiply the result by 10^n
        
        double n;
        //if ( 0 == (int) prefixOutputList.getSelectedIndex() )
          //  n = 
        switch ((int) prefixOutputList.getSelectedIndex() ) {
            case 0: n = 24; break;
            case 1: n = 21; break;
            case 2: n = 18; break;
            case 3: n = 15; break;
            case 4: n = 12; break;
            case 5: n = 9 ; break;
            case 6: n = 6 ; break;
            case 7: n = 3 ; break;
            case 8: n = 2 ; break;
            case 9: n = 1 ; break;
            case 10: n = 0; break;
            case 11: n = -1; break;
            case 12: n = -2; break;
            case 13: n = -3; break;
            case 14: n = -6; break;
            case 15: n = -9; break;
            case 16: n = -12; break;
            case 17: n = -15; break;
            case 18: n = -18; break;
            case 19: n = -21; break;
            case 20: n = -24; break;
            default: n = 0; break;
        }
        
        double tempg = convert.div10to(result, n);

        appOutput.setText( Double.toString( tempg ) );

}//GEN-LAST:event_prefixOutputListActionPerformed

    private void invertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invertButtonActionPerformed
        // TODO add your handling code here:
        appInput.setText( appOutput.getText() );
    }//GEN-LAST:event_invertButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField appInput;
    private javax.swing.JTextField appOutput;
    private javax.swing.JComboBox conversionList;
    private javax.swing.JButton converterButton;
    private javax.swing.JButton copyButton;
    private javax.swing.JLabel exponentLabel;
    private javax.swing.JButton invertButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JComboBox prefixInputList;
    private javax.swing.JComboBox prefixOutputList;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JLabel unitLabel;
    private javax.swing.JLabel unitOfInput;
    private javax.swing.JLabel unitOfOutput;
    private javax.swing.JLabel unitTypeLabel;
    private javax.swing.JComboBox unitsTypeList;
    // End of variables declaration//GEN-END:variables


    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    //enumerate UnitTypes
    //private enum UnitTypes {DISTANCE, MASS, ENERGY, POWER};
    //enumurate Distance Units
    //private enum DistanceUnits{ METRES, FEET, INCHES, MILES, YARD, };
    //doesn't act like c++ enums. more like structs
    private double result;

    public int ENERGY   = 0;
    public int POWER    = 1;
    public int MASS     = 2;
    public int DISTANCE = 3;

    private JDialog aboutBox;
}
